<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSP Security on Tedshd&#39;s Dev note</title>
    <link>/categories/csp-security/</link>
    <description>Tedshd&#39;s Dev note (CSP Security)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Sep 2016 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/categories/csp-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Content Security Policy - 論一般網站放置的可行性</title>
      <link>/posts/2016-09-19-content-security-policy-on-the-feasibility-of-general-site-placed/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/posts/2016-09-19-content-security-policy-on-the-feasibility-of-general-site-placed/</guid>
      <description>&lt;h2 id=&#34;content-security-policy---論一般網站放置的可行性&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#content-security-policy---%e8%ab%96%e4%b8%80%e8%88%ac%e7%b6%b2%e7%ab%99%e6%94%be%e7%bd%ae%e7%9a%84%e5%8f%af%e8%a1%8c%e6%80%a7&#34;&gt;
        #
    &lt;/a&gt;
    Content Security Policy - 論一般網站放置的可行性
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;
        ##
    &lt;/a&gt;
    前言
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Content Security Policy 出來也有一段時間了&lt;/p&gt;
&lt;p&gt;他的目的是為了從 &lt;code&gt;header&lt;/code&gt; 下手去抵禦一些攻擊, 基本上遵循它的rule 就可以避掉一些 XSS 攻擊&lt;/p&gt;
&lt;p&gt;但有時加入這功能會需要變動程式的架構或者某些性質的服務是根本就是設定到可以動的話安全係數會降低許多&lt;/p&gt;
&lt;p&gt;這裏會稍微舉一些例子來說明&lt;/p&gt;
&lt;p&gt;關於 Content Security Policy 以下有一些連結可以幫助瞭解這個 header&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&#34;&gt;Refer - An Introduction to Content Security Policy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/09/csp.html&#34;&gt;Refer - Content Security Policy 入门教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/&#34;&gt;Refer - Content-Security-Policy - HTTP Headers 的資安議題 (2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://content-security-policy.com/&#34;&gt;Refer - Content Security Policy Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前有只用的知名服務有 &lt;strong&gt;github&lt;/strong&gt; 和 &lt;strong&gt;dropbox&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;簡介&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%b0%a1%e4%bb%8b&#34;&gt;
        ##
    &lt;/a&gt;
    簡介
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;簡單說就是會限制頁面上出現的東西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain&lt;/li&gt;
&lt;li&gt;inline style&lt;/li&gt;
&lt;li&gt;inline script&lt;/li&gt;
&lt;li&gt;iframe, frame&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用 html &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 或用 http header 的方式使用, 所以純靜態網頁也是可以用的&lt;/p&gt;
&lt;p&gt;但有個限制是用 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 的方式就不能用 &lt;code&gt;frame-ancestors&lt;/code&gt; 了&lt;/p&gt;
&lt;p&gt;還有需注意的是 &lt;code&gt;&amp;lt;body onload=&amp;quot;console.log(&#39;load&#39;)&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;a href=&amp;quot;javascript:void(0);&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 這種也是 inline script&lt;/p&gt;
&lt;p&gt;但 &lt;code&gt;a&lt;/code&gt; 的例子可以在 &lt;code&gt;click&lt;/code&gt; 時用 &lt;code&gt;e.preventDefault();&lt;/code&gt; 避掉&lt;/p&gt;
&lt;p&gt;這裏會著重在 iframe 的限制, 因為其他的部分上面參考文章都有詳細的說明, 但關於 iframe 卻沒有較詳細的說明&lt;/p&gt;
&lt;p&gt;且發現在實作上跟限制 iframe 有關的設定, 在不同 browser 也有差, 甚至與 &lt;a href=&#34;https://content-security-policy.com/&#34;&gt;Content Security Policy Reference&lt;/a&gt; 都還有差異&lt;/p&gt;
&lt;p&gt;以下是用 chrome 52, safari 9.1.3, firefox 48.0.2 測試的結果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;frame-src&lt;/code&gt; 雖然被捨棄建議用 &lt;code&gt;child-src&lt;/code&gt; 但 safari 不支援, 所以還是得用(把他跟 child-src 設定一樣即可)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;frame-ancestors&lt;/code&gt; 還沒支援很多 browser, 建議還是加上 &lt;code&gt;X-Frame-Options&lt;/code&gt; 的方式來達到兼容(&lt;a href=&#34;https://developer.mozilla.org/zh-TW/docs/HTTP/X-Frame-Options&#34;&gt;什麼是 X-Frame-Options?&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每個頁面是吃該頁面的 header 的 CSP 設定, 所以 iframe 是吃 iframe 自己 header 的設定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本上放 Google 廣告聯播網的要另外處理因為程式碼如下圖, 但可以把它放到 iframe 隔離獨自處理(&lt;del&gt;但曝光和點擊需測試一下&lt;/del&gt; 經測試是有計算到的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/storage-bucket-83851.appspot.com/o/logdown%2F%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-09-20%20%E4%B8%8A%E5%8D%8810.51.07.png?alt=media&amp;token=6b99ed0c-c6fe-45de-9455-85f9a0f69391&#34; width=&#34;80%&#34; style=&#34;display:inline-block;margin:0 auto;&#34;&gt;
&lt;p&gt;以下是範例可以玩玩看&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tedshd/content-security-policy-example&#34;&gt;github demo code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後可能有人有疑問那用 browser 的 devtool 去操作 js 改動頁面或執行 js, CSP 可以擋得住嗎?&lt;/p&gt;
&lt;p&gt;擋不住啊, 因為 CSP 是 header, 它在 response 時檢查 header 去了解之後進來的 content 必須符合 CSP 的設定, 不然就擋掉 ,當然沒辦法管已經載完的頁面你要怎麼用 devtool 玩頁面都無法阻擋&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
