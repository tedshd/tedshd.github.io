<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on Tedshd&#39;s Dev note</title>
    <link>/categories/develop/</link>
    <description>Tedshd&#39;s Dev note (Develop)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Mar 2014 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clean Code(無暇的程式碼) - Note</title>
      <link>/posts/2014-03-08-clean-code-time-code-note/</link>
      <pubDate>Sat, 08 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/2014-03-08-clean-code-time-code-note/</guid>
      <description>&lt;h2 id=&#34;clean-code無暇的程式碼---note&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#clean-code%e7%84%a1%e6%9a%87%e7%9a%84%e7%a8%8b%e5%bc%8f%e7%a2%bc---note&#34;&gt;
        #
    &lt;/a&gt;
    Clean Code(無暇的程式碼) - Note
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://user-image.logdown.io/user/3170/blog/3202/post/184150/nDf94VIRa2vEjk9WyD6L_%E7%84%A1%E7%91%95%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC.jpg&#34; alt=&#34;無瑕的程式碼.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;最近跟同事借了這本書, 主要是因為以前沒寫過大專案, 在寫大專案被主管指出有不少的地方邏輯有問題, 變數的命名也有許多問題, 剛好有同事有這本書, 便借來閱讀, 以增進自己的功力, 書中作者是以 Java 為例, 但寫一個 Clean Code 是不分程式語言的.&lt;/p&gt;
&lt;p&gt;以下算是閱讀筆記&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;劣質的程式碼導致了這家公司的倒閉
&lt;em&gt;無暇的程式碼 P.3&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我喜歡我程式優雅又有效率. 邏輯直接了當, 使得錯誤無處可躲. 儘量降低程式的相依性, 以減輕維護上的工夫. 根據清楚的策略, 完備處理錯誤的程式碼. 盡可能的最佳化程式效能, 以避免引起他人, 因對於程式進行無章法的最佳化, 而把程式弄得一團亂. Clean Code 只做好一件事.
&lt;em&gt;無暇的程式碼 P.8&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Clean Code 是可被原作者以外的開發者閱讀與增強的. &amp;hellip;&amp;hellip;
&lt;em&gt;無暇的程式碼 P.10&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;當每個你看到的程式, 執行結果都與你想的差不多, 你會察覺到你正工作在 Clean Code 之上. &amp;hellip;&amp;hellip;
&lt;em&gt;無暇的程式碼 P.11&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;所以讓程式碼更容易閱讀, 也會讓程式碼變得更容易撰寫.
&lt;em&gt;無暇的程式碼 P.16&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有意義的命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使名稱代表意圖&lt;/li&gt;
&lt;li&gt;避免編碼&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡短&lt;/li&gt;
&lt;li&gt;避免形成巢狀&lt;/li&gt;
&lt;li&gt;只做一件事&lt;/li&gt;
&lt;li&gt;形成由上往下閱讀的程式碼&lt;/li&gt;
&lt;li&gt;減少需要參數量&lt;/li&gt;
&lt;li&gt;不要重複&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;函式應該只做一件事. 它們應該把這件事做好. 而且他們應該只做這件事.
&lt;em&gt;無暇的程式碼 P.41&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;不要替糟糕的程式碼寫註解 - 重寫它
&lt;em&gt;Brian W.Kernighan(布萊恩.格尼漢) 和 P.J. Plaugher(普勞賀)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;註解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用程式碼表達你的本意&lt;/li&gt;
&lt;li&gt;法律型註解&lt;/li&gt;
&lt;li&gt;資訊型註解&lt;/li&gt;
&lt;li&gt;對意圖的解釋&lt;/li&gt;
&lt;li&gt;TODO&lt;/li&gt;
&lt;li&gt;當可以使用函式或變數時就別使用註解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編排&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空白間隔&lt;/li&gt;
&lt;li&gt;由上往下閱讀
&lt;ul&gt;
&lt;li&gt;函數的宣告放置於呼叫該函數的下方&lt;/li&gt;
&lt;li&gt;以空白的一行區隔&lt;/li&gt;
&lt;li&gt;運算子以空白區隔&lt;/li&gt;
&lt;li&gt;縮排&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物件及資料結構&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;資料抽象化&lt;/li&gt;
&lt;li&gt;資料結構化 物件化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;結構化的程式碼(使用資料結構的程式碼)容易添加函式, 而不需要變動已有的資料結構. 而物件導向的程式碼難以添加新的函式, 因為必須改變所有類別.
&lt;em&gt;無暇的程式碼 P.109&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Coding Style</title>
      <link>/posts/2013-09-10-coding-style/</link>
      <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/posts/2013-09-10-coding-style/</guid>
      <description>&lt;h2 id=&#34;coding-style&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#coding-style&#34;&gt;
        #
    &lt;/a&gt;
    Coding Style
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;條件判斷&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e6%a2%9d%e4%bb%b6%e5%88%a4%e6%96%b7&#34;&gt;
        ##
    &lt;/a&gt;
    條件判斷
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;在 PHP &amp;amp; JavaScript 中有許多邏輯判斷
當有許多條件要去檢查時, 一般來說就是用 &lt;strong&gt;if&lt;/strong&gt; 一直寫下去
最後就造成下面的情況(以 PHP 為例)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$a&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$b&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$d&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#78787e&#34;&gt;// do something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#78787e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣下去就沒完沒了, 而且縮排會越來越多, 要看 code 也很不方便
所以假如就已作條件檢查來說
可以用以下的做法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// check condition 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$a&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$b&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// check condition 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// check condition 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff5c57&#34;&gt;$c&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;9&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// check condition 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;!&lt;/span&gt;d)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// do something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;做個 &lt;strong&gt;反向思考&lt;/strong&gt; , 把不適合的條件列出再一一 return or 作處理
剩下的便是所需要的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;從巢狀式結構變成區域式
結構也較為清晰
debug 也較容易&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有時也會遇到應該用 &lt;strong&gt;switch&lt;/strong&gt; 卻用 &lt;strong&gt;if&lt;/strong&gt; 去一直加下去的情況
所以當 &lt;strong&gt;if&lt;/strong&gt; 用到 &lt;strong&gt;&lt;em&gt;3 個&lt;/em&gt;&lt;/strong&gt; 以上時, 就要思考要用什麼敘述來達到目的比較好
也許可以用 &lt;code&gt;switch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;function&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#function&#34;&gt;
        ##
    &lt;/a&gt;
    function
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;有時遇到很多 code 重複時, 我們可以抽離這些重複的部分, 把它放到一個 function 中
要用時在再去呼叫那個 function&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/01/abstraction_principles.html&#34;&gt;Refer-代码的抽象三原则&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;以錯誤為優先處理&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e4%bb%a5%e9%8c%af%e8%aa%a4%e7%82%ba%e5%84%aa%e5%85%88%e8%99%95%e7%90%86&#34;&gt;
        ##
    &lt;/a&gt;
    以錯誤為優先處理
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; doSomething(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (data.status &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;fail&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#78787e&#34;&gt;// handle error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#78787e&#34;&gt;// handle ok
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
