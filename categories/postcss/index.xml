<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postcss on Tedshd&#39;s Dev note</title>
    <link>/categories/postcss/</link>
    <description>Tedshd&#39;s Dev note (Postcss)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Nov 2015 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/categories/postcss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS4 - 關於 css4 and postcss 的一些想法</title>
      <link>/posts/2015-11-20-css4-css4-thoughts-and-postcss/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/posts/2015-11-20-css4-css4-thoughts-and-postcss/</guid>
      <description>&lt;h2 id=&#34;css4---關於-css4-and-postcss-的一些想法&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#css4---%e9%97%9c%e6%96%bc-css4-and-postcss-%e7%9a%84%e4%b8%80%e4%ba%9b%e6%83%b3%e6%b3%95&#34;&gt;
        #
    &lt;/a&gt;
    CSS4 - 關於 css4 and postcss 的一些想法
&lt;/div&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34;&gt;
        ##
    &lt;/a&gt;
    前言
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;在年末才來發這篇文&amp;hellip;&lt;/p&gt;
&lt;p&gt;在今年大家開始瘋 &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;react&lt;/a&gt;(咦? AngularJS 勒&amp;hellip;), &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;, &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;postcss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好像沒聽過上述這幾個詞就沒法自稱前端工程師(還好我現在都自稱打字員)&lt;/p&gt;
&lt;p&gt;到了最近才有空閒研究 postcss 到底在做啥&lt;/p&gt;
&lt;p&gt;一開始聽說可以無痛接軌未來(welcome to feature), 不像 &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; 未來如果要轉換就不好轉換(其實見仁見智啦)&lt;/p&gt;
&lt;p&gt;聽起來好潮喔, 但很忙沒時間搭理它&lt;/p&gt;
&lt;p&gt;而且這年頭的 tool 都越來越多步驟和許多工具要搞, 除非靜下心來專心研究, 不然哪有時間搞啊(感覺像是逃避的藉口&amp;hellip;)&lt;/p&gt;
&lt;p&gt;直到了最近自己有些小東西要改, 需要用到變數的功能, 就想到 CSS4 不是有大家夢寐以求的 var() 功能嗎(感覺潮潮的)&lt;/p&gt;
&lt;p&gt;就花了點時間研究一下 &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;postcss&lt;/a&gt; 這在 github 的專案&lt;/p&gt;
&lt;p&gt;一看下去不得了, 包山包海一卡車功能, 還包含了之前聽別人介紹的連 Sass 的部分寫法的功能都有&amp;hellip;&lt;/p&gt;
&lt;p&gt;看完的瞬間想翻桌, 只是要寫個 CSS, RD 何苦為難 RD 呢, 我不需要那麼多功能啊~&lt;/p&gt;
&lt;p&gt;還好有仔細看到主要 CSS4[&lt;a href=&#34;#ps1&#34;&gt;註&lt;/a&gt;] 是用 &lt;a href=&#34;http://cssnext.io/&#34;&gt;cssnext&lt;/a&gt; 這專案來處理(網站還用回到未來的梗&amp;hellip;)&lt;/p&gt;
&lt;p&gt;所以我就果斷使用 cssnext 就好了(我真的很討厭用一套工具還要裝許多套件, 然後有的套件還不一定是你需要的不然就是有套件的部分功能是重複的&amp;hellip;)&lt;/p&gt;
&lt;h3 id=&#34;gulpfile-設定&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#gulpfile-%e8%a8%ad%e5%ae%9a&#34;&gt;
        ##
    &lt;/a&gt;
    gulpfile 設定
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;現在有一大堆 build tool 像是 &lt;a href=&#34;http://gruntjs.com/&#34;&gt;grunt&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;, &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt;, &lt;a href=&#34;https://webpack.github.io/&#34;&gt;webpack&lt;/a&gt; 等工具&lt;/p&gt;
&lt;p&gt;我還是習慣用 gulp, 除非等 gulp 不合需求才會再去看 browserify 或 webpack 怎麼用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; gulp &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;var&lt;/span&gt; cssnext &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;gulp-cssnext&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gulp.task(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gulp.run(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gulp.watch([&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;./src/**&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gulp.run(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gulp.task(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gulp.src(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;src/*.css&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .pipe(cssnext({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        compress&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .pipe(gulp.dest(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;./build/&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;結語&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#%e7%b5%90%e8%aa%9e&#34;&gt;
        ##
    &lt;/a&gt;
    結語
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;以下為我自己個人看法, 絕對不是要戰網路上的大大和大神們(本魯小弟什麼咖啊)&lt;/p&gt;
&lt;p&gt;所以聽聽就好&lt;/p&gt;
&lt;p&gt;個人覺得上述講的 postcss 啊, cssnext 啊等等都是在自嗨&lt;/p&gt;
&lt;p&gt;大家一定會說:『靠!你什麼咖啊?竟然敢這樣說』&lt;/p&gt;
&lt;p&gt;因為我發現有個現實點就是 CSS4[&lt;a href=&#34;#ps1&#34;&gt;註&lt;/a&gt;] 在 W3C 根本還在草案啊(翻桌)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/selectors4/&#34;&gt;Selectors Level 4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;連 var() 都還是在編輯中的草案&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drafts.csswg.org/css-variables/&#34;&gt;CSS Custom Properties for Cascading Variables Module Level 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://css4-selectors.com/&#34;&gt;CSS4 Selectors&lt;/a&gt; 上也說它就是還在草案階段&lt;/p&gt;
&lt;p&gt;不了解 W3C 流程的可以看一下 &lt;a href=&#34;http://www.w3.org/2015/Process-20150901/&#34;&gt;World Wide Web Consortium Process Document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;依 W3C 的進度就知道真的還很遙遠, 真的可能得像回到未來一樣得搭時光車到 30 年後才能用&amp;hellip;&lt;/p&gt;
&lt;p&gt;所以這不是在自嗨那什麼才是自嗨&lt;/p&gt;
&lt;p&gt;如果問我會不會用, 我會說我會玩一下, 但現在應該還不會用在公司的專案上&lt;/p&gt;
&lt;p&gt;Refers 就在上述連結中, 所以文末就不附了&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;ps1&#34;&gt;[註]經友人補充雖然說 CSS4, 但在 W3C 上不這樣說, 它其實是 Selectors Level 4&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
